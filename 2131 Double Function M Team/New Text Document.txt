#include "robot-config.h"
#include <cmath>

vex::competition    Competition;

void ManualDriveCont(bool Flipped){
    if(Flipped){
        setDrivePower(Controller1.Axis3.value(), Controller1.Axis2.value());
    }
    if(!Flipped){
        setDrivePower(-Controller1.Axis2.value(), -Controller1.Axis3.value());
    }
}
void driveLock(){
    LeftBMotor.stop(vex::brakeType::hold);
    RightBMotor.stop(vex::brakeType::hold);
}
void DriveCont_LockCont(){
    if(Controller1.ButtonY.pressing() && DriveLockConBtnPressed==false){
        DriveLockConBtnPressed=true;
        DriveLockInverted=!DriveLockInverted;
    }
    if(!Controller1.ButtonY.pressing() && DriveLockConBtnPressed==true){
        DriveLockConBtnPressed=false;
    }
    
    if(DriveLockInverted) driveLock();
    else if(!DriveLockInverted && modeVar == 0) {
        LeftBMotor.setStopping(vex::brakeType::coast);
        RightBMotor.setStopping(vex::brakeType::coast);
        ManualDriveCont(true);
    }
    else if(!DriveLockInverted && modeVar == 1) {
        LeftBMotor.setStopping(vex::brakeType::coast);
        RightBMotor.setStopping(vex::brakeType::coast);
        ManualDriveCont(false);
    }
}

void liftControll(int pct=100){
    //Lift Control
    if(Controller1.ButtonL1.pressing()) {
        setLiftPower(pct);
    }   
    else if(Controller1.ButtonL2.pressing()) {
        setLiftPower(-pct);
    }   
    else{ 
        LiftMotorL.stop(vex::brakeType::hold);
        LiftMotorR.stop(vex::brakeType::hold);
    }
}
void liftContVPID(){
    //----------------------Lift Controll------------------------//
    if(liftMode > 5)
        liftMode = 5;
    if(liftMode < 1)
        liftMode = 1;

    if(Controller1.ButtonL1.pressing() == false && Controller1.ButtonL2.pressing() == false)
        liftButtonWait=true;
    if(Controller1.ButtonL1.pressing() && liftButtonWait == true && liftMode <= 5){
        liftButtonWait=false;
        liftMode++;
    }

    if(Controller1.ButtonL2.pressing() && liftButtonWait == true && liftMode >= 1){
        liftButtonWait=false;
        liftMode--;
    }

    if(liftMode == 1)
        liftRotoateTo(0);
    if(liftMode == 2)
        liftRotoateTo(145);
    if(liftMode == 3)
        liftRotoateTo(400);
    if(liftMode == 4)
        liftRotoateTo(530);
    if(liftMode == 5)
        liftRotoateTo(680);
}
void wirstControll(){
    if(Controller1.ButtonR2.pressing() && WristMotorConBtnPressed==false){
        WristMotorConBtnPressed=true;
        WristMotor.startRotateFor(WristMotorInverted ? 170 : -170,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
        WristMotorInverted=!WristMotorInverted;
    }
    if(!Controller1.ButtonR2.pressing() && WristMotorConBtnPressed==true){
        WristMotorConBtnPressed=false;
    }
}

void puncherControll(){
    if(Controller1.ButtonL1.pressing()) {
        setPuncherPower(100);
    }  
    else PuncherMotor.stop(vex::brakeType::coast);
}
void intakeControll(){
    if(Controller1.ButtonR1.pressing()) {
        setIntakePower(100);
    }   
    else if(Controller1.ButtonR2.pressing()) {
        setIntakePower(-100);
    }   
    else IntakeMotor.stop(vex::brakeType::coast);
}
void jawControll(){
    if(Controller1.ButtonR1.pressing() && JawMotorConBtnPressed==false){
        JawMotorConBtnPressed=true;
        JawMotor.startRotateFor(JawMotorInverted ? -50 : 50,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
        JawMotorInverted=!JawMotorInverted;
    }
    if(!Controller1.ButtonR1.pressing() && JawMotorConBtnPressed==true){
        JawMotorConBtnPressed=false;
    }
}

void jawBandCont(){
    if(Controller1.ButtonR1.pressing()){
        setJawPower(100);
    }
    else {
        setJawPower(0);
    }
}
/*-----------------------------------------------------------------*/

Ramping LDR(1,3);
Ramping RDR(1,3);

int Drive_Ramping(){
    DriveRampingEnabled=true;
    while(DriveRampingEnabled){
        LDR.TaskRun();
        RDR.TaskRun();
        setDrivePower(LDR.Pct,RDR.Pct);
        vex::task::sleep(LDR.ChangeMsec);
    }
    return 1;
}

int ControllerScreen(){
    Brain.Screen.render(true,false);
    while(true){
        Brain.Screen.newLine();
        //Controller1.Screen.print(RightBMotor.rotation(vex::rotationUnits::deg));
        Brain.Screen.print(LDR.RequestedPct);
        Brain.Screen.print(", ");
        Brain.Screen.print(LDR.Pct);
        Brain.Screen.print(", ");
        Brain.Screen.print(RDR.RequestedPct);
        Brain.Screen.print(", ");
        Brain.Screen.print(RDR.Pct);
    Brain.Screen.render();
        vex::task::sleep(20);
        
    }
}
/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*---------------------------------------------------------------------------*/

void pre_auton( void ) {
    Brain.Screen.print("Setting Up...");
    //Controller1.Screen.print("Hi Trent! Initializing...");

    WristMotor.setStopping(vex::brakeType::hold);
    WristMotor.setTimeout(250,vex::timeUnits::msec);
    LeftBMotor.setStopping(vex::brakeType::coast);
    RightBMotor.setStopping(vex::brakeType::coast);
    LiftMotorR.setStopping(vex::brakeType::hold);
    LiftMotorL.setStopping(vex::brakeType::hold);
    PuncherMotor.setStopping(vex::brakeType::coast);
    IntakeMotor.setStopping(vex::brakeType::brake);

    LiftMotorR.resetRotation();
    LiftMotorL.resetRotation();
    JawMotor.resetRotation();
    WristMotor.resetRotation();
    LeftBMotor.resetRotation();
    RightBMotor.resetRotation();

}
//*/*/*/*/*/*/*/*//*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
//-----------------Dive Aton COntroll-----------------//
void SetDRpower(int Lpower,int Rpower){ //DR
    LDR.RequestedPct=Lpower;
    RDR.RequestedPct=Rpower;
}
void DI(int Lpower,int Rpower){
    LDR.RequestedPct=Lpower;
    RDR.RequestedPct=Rpower;
    LDR.Pct=Lpower;
    RDR.Pct=Rpower;
    setDrivePower(LDR.Pct,RDR.Pct);
}

void AtonDriveRamp(double Distance,int Pct=100,int EndWait=250,int Correction=2){
	//calculate distince using inch
    double WheelCir=4*3.14159265;
    double Direction=sgn(Distance);
    double Rev= std::abs(Distance)/WheelCir;
     int LPowerSend=0;
     int RPowerSend=0;
	//clear enc
    LeftBMotor.resetRotation();
    RightBMotor.resetRotation();
	//is it there yet?
    while(std::abs(RightBMotor.rotation(vex::rotationUnits::rev))<std::abs(Rev)){
        double LMotorEncValue=LeftBMotor.rotation(vex::rotationUnits::deg);
        double RMotorEncValue=RightBMotor.rotation(vex::rotationUnits::deg);
		//straiten
        if(std::abs(LMotorEncValue)>std::abs(RMotorEncValue)){
            LPowerSend=Pct-Correction;
            RPowerSend=Pct;
        }
        else if(std::abs(LMotorEncValue)<std::abs(RMotorEncValue)){
            LPowerSend=Pct;
            RPowerSend=Pct-Correction;
        }
        else if(std::abs(LMotorEncValue)==std::abs(RMotorEncValue)){
            LPowerSend=Pct;
            RPowerSend=Pct;
        }
		//correct direction
        LPowerSend=LPowerSend*Direction;
        RPowerSend=RPowerSend*Direction;
		//send to SetDRpower
        SetDRpower(LPowerSend,RPowerSend);
        vex::task::sleep(1);
    }
    SetDRpower(0,0);
    while(RightBMotor.isSpinning() || LeftBMotor.isSpinning()){
        vex::task::sleep(1);
    }
    vex::task::sleep(EndWait);
}

void TimeAutoDrive(int time, int power){
    LeftBMotor.resetRotation();
    RightBMotor.resetRotation();

    RightBMotor.spin(vex::directionType::fwd,power,vex::velocityUnits::pct);
    LeftBMotor.spin(vex::directionType::fwd,power,vex::velocityUnits::pct);
    vex::task::sleep(time);
    RightBMotor.stop(vex::brakeType::coast);
    LeftBMotor.stop(vex::brakeType::coast);
}

void DriveTurn(int degg, int power, bool direction, bool wait){ //direction: true = right, flase = left
    if(wait){
        LeftBMotor.startRotateFor(direction ? degg : -degg,vex::rotationUnits::deg,power,vex::velocityUnits::pct);
        RightBMotor.rotateFor(direction ? -degg : degg,vex::rotationUnits::deg,power,vex::velocityUnits::pct);
    }
    if(!wait){
        LeftBMotor.startRotateFor(direction ? degg : -degg,vex::rotationUnits::deg,power,vex::velocityUnits::pct);
        RightBMotor.startRotateFor(direction ? -degg : degg,vex::rotationUnits::deg,power,vex::velocityUnits::pct);
    }
    /*//int EncValue = RightBMotor.rotation(vex::rotationUnits::deg);
    while(abs(RightBMotor.rotation(vex::rotationUnits::deg)) < requested){
        RightBMotor.spin(vex::directionType::fwd,direction ? -power : power,vex::velocityUnits::pct);
        LeftBMotor.spin(vex::directionType::fwd,direction ? power : -power,vex::velocityUnits::pct);
    }
    RightBMotor.stop(vex::brakeType::coast);
    LeftBMotor.stop(vex::brakeType::coast);*/
}

void TurnRamp(double deg,int LPowerSend=50,int RPowerSend=50,int EndWait=250){ //-left,+right
    int Dir=sgn(deg);
    deg=abs(deg)/12.56;
    LPowerSend=LPowerSend*Dir;
    RPowerSend=RPowerSend*Dir;
    RightBMotor.resetRotation();
    while(abs(RightBMotor.rotation(vex::rotationUnits::rev))<deg){
        DI(LPowerSend,-RPowerSend);
        vex::task::sleep(1);
    }
    DI(0,0);
    while(RightBMotor.isSpinning() || LeftBMotor.isSpinning()){
        vex::task::sleep(1);
    }
    vex::task::sleep(EndWait);
}
//------------------------------------------------------//
void AutoLift(int degg, int pct, bool wait){
    if(wait){
        LiftMotorR.startRotateTo(degg,vex::rotationUnits::deg,pct,vex::velocityUnits::pct);
        LiftMotorL.rotateTo(degg,vex::rotationUnits::deg,pct,vex::velocityUnits::pct);
    }
    if(!wait){
        LiftMotorL.startRotateTo(degg,vex::rotationUnits::deg,pct,vex::velocityUnits::pct);
        LiftMotorR.startRotateTo(degg,vex::rotationUnits::deg,pct,vex::velocityUnits::pct);
    }
}

void toggleWrist(){
    WristMotor.startRotateFor(WristMotorInverted ? 170 : -170,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
    WristMotorInverted=!WristMotorInverted;
}
void WristLock(){
    setWristPower(-50);
    WristMotor.startRotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
}
void IntakeAtonSet(bool ON, bool direction){
    if(ON){
        if(direction) setIntakePower(100);
        if(!direction) setIntakePower(-100);
    }
    if(!ON){IntakeMotor.stop();}
}
void PunchAton(bool wait){
    if(wait)
        PuncherMotor.rotateFor(-360,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
    if(!wait)
        PuncherMotor.startRotateFor(-360,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
}
/*---------------------------------------------------------------------------*/
/*                              Autonomous Task                              */
/*---------------------------------------------------------------------------*/
void FirstTest(){
    //SetDRpower(-100,-100);
    //vex::task::sleep(5000);
    //AtonDriveRamp(50,100);
    //AtonDriveRamp(-50,100);
    WristLock();
    TurnRamp(13);
    TurnRamp(-13);
    toggleWrist();
}

void RightBlueFront(){
    
    WristLock();
    AtonDriveRamp(-33,100);
    IntakeAtonSet(true, 1);
    AtonDriveRamp(-9,100);
    vex::task::sleep(250);
    IntakeAtonSet(false, 1);
    AtonDriveRamp(66,100);
    TimeAutoDrive(250,60);
    IntakeAtonSet(false, 1);
    
    AtonDriveRamp(-3,100);
    TurnRamp(14);
    AtonDriveRamp(-.6,100);
    PunchAton(true);

    TurnRamp(1);
    IntakeAtonSet(true, 1);
    AtonDriveRamp(-12,100);
    PunchAton(true);
    IntakeAtonSet(false, 1);
    TurnRamp(1.5);
    AtonDriveRamp(-18.5,100);

    toggleWrist();
    //AutoLift(30,50,true);
    setJawPower(100);
    AtonDriveRamp(10,100);
    TurnRamp(8);
    AtonDriveRamp(2.5,100);
    setJawPower(0);
    AutoLift(200,50,true);
    vex::task::sleep(500);
    setJawPower(100);
    vex::task::sleep(500);
    setJawPower(0);
}

void RightBlueBack(){
    
}
void autonomous( void ) {
    int SelectValue = AtonSelect.value(vex::percentUnits::pct);
    //vex::task printDis(ControllerScreen);
        DriveRampingEnabled = false;
    vex::task AtonDrive(Drive_Ramping);
    
    WristMotor.stop(vex::brakeType::hold);

    if(SelectValue <= 8) {
        
    }
    if(SelectValue > 8 && SelectValue <= 43) {
        RightBlueFront();
    }
    if(SelectValue > 43 && SelectValue <= 86){

    }

    if(SelectValue > 86){
        FirstTest();
    }

    LeftBMotor.setStopping(vex::brakeType::coast);
    RightBMotor.setStopping(vex::brakeType::coast);
}

/*---------------------------------------------------------------------------*/
/*                              User Control Task                            */
/*---------------------------------------------------------------------------*/

void usercontrol( void ) {
    Brain.Screen.print("Start Usercontroll");
    //Controller1.Screen.print("Hi Trent! You're driving now...");
    
    DriveRampingEnabled = false;
    //vex::task printDis(ControllerScreen);
    //vex::task DriveContRampTask(DriveContRamp);


    LiftMotorR.resetRotation();
    LiftMotorL.resetRotation();
    JawMotor.resetRotation();
    WristMotor.resetRotation();

    while (3.1415926535897932384626433832795028841971==3.1415926535897932384626433832795028841971){
        if (!Controller1.ButtonLeft.pressing())
            usertoggle=1;
        if (Controller1.ButtonLeft.pressing() && modeVar==1 && usertoggle==1){
            modeVar=0;
            usertoggle=0;
        }
        if (Controller1.ButtonLeft.pressing() && modeVar==0 && usertoggle==1){
            modeVar=1;
            usertoggle=0;
        }
        
        DriveCont_LockCont();
        
        //=========================Normal Caps Drive MOde===========================//
        if (modeVar == 0)
        {
            if (initalize==0){
                
            }
            initalize=1;

            //ManualDriveCont(true);
            liftControll();
            jawBandCont();
            //jawControll();
            wirstControll();

            vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources.
        }
        //----------------------Puncher Controll MODe------------------------//

        if (modeVar == 1) // Ball Mode
        {
            if (initalize==1){
                //StartJaw.stop();
            }
            initalize=0;

            //ManualDriveCont(false);
            intakeControll();
            puncherControll();

            vex::task::sleep(20); //Sleep the task for a short amount of time to prevent wasted resources. 
        }
    }
}
//
// Main will set up the competition functions and callbacks.
//
int main() {

    //Run the pre-autonomous function. 
    pre_auton();

    //Set up callbacks for autonomous and driver control periods.
    Competition.autonomous( autonomous );
    Competition.drivercontrol( usercontrol );

    //Prevent main from exiting with an infinite loop.                        
    while(1) {
        vex::task::sleep(100);//Sleep the task for a short amount of time to prevent wasted resources.
    }    

}